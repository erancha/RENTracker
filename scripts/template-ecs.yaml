AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: RENTracker ECS Fargate.

Parameters:
  AdminUserId:
    Description: 'User id of the admin'
    Type: String
    Default: '53b408f2-d071-70e2-f4da-24618fa52c03' # bettyadm100@gmail.com TODO: Allow to configure from the app
  SaaSTenantUserId:
    Type: String
    Description: 'User id of the SaaS tenant (acts as a landlord)'
    Default: '23743842-4061-709b-44f8-4ef9a527509d' # erancha@gmail.com

  ExistingVpcId:
    Type: String
    Description: 'ID of an existing VPC (leave empty to create a new one)'
    Default: 'vpc-08016eb77e7ac9962' # en-VPC
  ExistingIgwId:
    Type: String
    Description: 'ID of an existing IGW (leave empty to create a new one)'
    Default: 'igw-0fd7e050083dec0b9' # en-IGW

  ExistingUserPoolId:
    Description: 'ID of an existing Cognito User Pool'
    Type: String

  ExistingElasticacheRedisClusterAddress:
    Type: String
    Description: 'Address of an existing Redis cluster'

  LogGroupName:
    Type: String
    Description: 'Log group name for all ECS services'
    Default: '/aws/ecs'

  CrudDatabaseName:
    Type: String
    Default: cruddb
    Description: Name of the rentTracking database name
  RentTrackingServiceName:
    Type: String
    Default: RenTracker-service
    Description: Name of the rentTracking service
  RentTrackingTaskEcrImageUri:
    Type: String
    Description: Name of the rentTracking task image in the ECR repository

  ECSContainerPort:
    Type: Number
    Default: 8080
    Description: Port number the container exposes

  ECSContainerCpu:
    Type: Number
    Default: 256
    Description: CPU units for the container (256 = 0.25 vCPU)
  ECSContainerMemory:
    Type: Number
    Default: 512
    Description: Memory in MB for the container
  ECSDesiredCount:
    Type: Number
    Default: 2
    Description: The number of instantiations of the specified task definition to place and keep running in your service.
  ECSMaxCount:
    Type: Number
    Default: 5
    Description: The maximal number of instantiations of the specified task definition to place and keep running in your service.

  ExistingRDSEndpoint:
    Type: String
    Description: 'RDS instance endpoint from template.yaml'
  ExistingRDSSecurityGroupId:
    Type: String
    Description: 'RDS security group from template.yaml'

Conditions:
  CreateIgw: !Equals [!Ref ExistingIgwId, ''] # Internet gateway

Resources:
  #==========================================================================================================================================================
  # Networking resources:
  #  - 2 public subnets for an ALB, allowing inbound traffic only on port 80 (initially), from any ip, and outbound traffic only to the ECS' SG.
  #  - 2 private subnets for ECS, allowing inbound traffic only from the ALB's SG, and outbound traffic only to the ECR's and RDS's SGs.
  #  - 2 private subnets for RDS, allowing inbound traffic only from the ECS's SG, and outbound traffic only to the RDS service.
  #==========================================================================================================================================================
  # Traffic Flow Overview
  #   Client to ALB: The client sends a request to the ALB on port 80.
  #   ALB forwards requests to the ECS service's target group on port 80.
  #   Target Group to ECS Container: The target group forwards the request to the ECS container, which listens on a specific port.
  #   ECS service receives traffic on the port specified in ContainerPort (e.g., 8080).
  #   The security group for ECS (MyECSServicesSG) must allow traffic on the port your container is listening to (e.g., 8080).
  #==========================================================================================================================================================

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateIgw
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  AttachMyIGWToMyVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateIgw
    Properties:
      VpcId: !Ref ExistingVpcId
      InternetGatewayId: !Ref MyInternetGateway

  MyPublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ExistingVpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicRTB1'
  MyPublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ExistingVpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicRTB2'

  # The route defined with 0.0.0.0/0 allows outbound traffic from resources in the associated subnets to the public internet.
  # Responses to outbound requests are allowed back to those resources, effectively making the interaction appear bidirectional, as long as the security groups (SG) and network ACLs do not block that traffic.
  MyPublicRTB1ToMyIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !If [CreateIgw, !Ref MyInternetGateway, !Ref ExistingIgwId]
  MyPublicRTB2ToMyIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !If [CreateIgw, !Ref MyInternetGateway, !Ref ExistingIgwId]

  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ExistingVpcId
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet1'
  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ExistingVpcId
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet2'

  MyPublicSubnetToMyRTBAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      RouteTableId: !Ref MyPublicRouteTable1
  MyPublicSubnetToMyRTBAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet2
      RouteTableId: !Ref MyPublicRouteTable2

  MyALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP access. TODO: Handle SSL before production!'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALB-SG'
      VpcId: !Ref ExistingVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 # 443 TODO: Handle SSL before production!
          ToPort: 80 # 443 TODO: Handle SSL before production!
          CidrIp: 0.0.0.0/0

  MyECSServicesSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS service
      VpcId: !Ref ExistingVpcId
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: !Ref ECSContainerPort # Port your container listens on, e.g., 8080
          ToPort: !Ref ECSContainerPort # Port your container listens on, e.g., 8080
          SourceSecurityGroupId: !Ref MyALBSG
      SecurityGroupEgress:
        - IpProtocol: tcp # to redis
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp' # to ECR
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ECS-SG'

  MyALBEgressRule:
    Type: AWS::EC2::SecurityGroupEgress # MyALBSG to MyECSServicesSG.
    Properties:
      GroupId: !Ref MyALBSG
      IpProtocol: tcp
      FromPort: !Ref ECSContainerPort
      ToPort: !Ref ECSContainerPort
      DestinationSecurityGroupId: !Ref MyECSServicesSG

  MyECSServicesEgressRule:
    Type: AWS::EC2::SecurityGroupEgress # MyECSServicesSG to MyRDSSG
    Properties:
      GroupId: !Ref MyECSServicesSG
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref ExistingRDSSecurityGroupId

  #==========================================================================================================================================================
  # Application Load Balancer (ALB)
  #==========================================================================================================================================================
  RentTrackingALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-RentTrackingTG'
      Port: 80 # hardcoded - the Target group forwards to ECS on port 80
      Protocol: HTTP
      VpcId: !Ref ExistingVpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /api/crud/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  MyTimeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-TimeLambda'
      Handler: index.handler
      Role: !GetAtt MyTimeLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              return {
                  statusCode: 200,
                  statusDescription: "200 OK",
                  isBase64Encoded: false,
                  headers: {
                      "Content-Type": "text/plain"
                  },
                  body: new Date().toISOString()
              };
          };
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 10

  MyTimeLambdaALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 4
      Actions:
        # - Type: authenticate-cognito
        #   Order: 1
        #   AuthenticateCognitoConfig:
        #     UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
        #     UserPoolClientId: !Ref ALBCognitoUserPoolClient
        #     UserPoolDomain: !Ref ExistingCognitoDomain
        #     OnUnauthenticatedRequest: authenticate
        #     Scope: openid
        #     SessionCookieName: AWSELBAuthSessionCookie
        #     SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref MyTimeLambdaTG
      Conditions:
        - Field: path-pattern
          Values:
            - /api/time
      ListenerArn: !Ref MyALBListener

  MyTimeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  MyTimeLambdaTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-TimeLambdaTG'
      TargetType: lambda
      Targets:
        - Id: !GetAtt MyTimeLambda.Arn
      HealthCheckEnabled: false

  MyTimeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyTimeLambda.Arn
      Principal: 'elasticloadbalancing.amazonaws.com'
      SourceArn: !Sub
        - 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${TargetGroupName}/*'
        - TargetGroupName: !Sub '${AWS::StackName}-TimeLambdaTG'

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-ALB'
      Subnets:
        - !Ref MyPublicSubnet1
        - !Ref MyPublicSubnet2
      SecurityGroups:
        - !Ref MyALBSG
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '600' # seconds

  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 80 # hardcoded
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '404'
            MessageBody: 'Not Found'
            ContentType: text/plain

  # MyALBCertificate: # TODO: Handle SSL before production!
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: '!GetAtt MyALB.DNSName'
  #     ValidationMethod: DNS
  #     DomainValidationOptions:
  #       - DomainName: !GetAtt MyALB.DNSName
  #         ValidationDomain: !GetAtt MyALB.DNSName

  CorsOptionsRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref MyALBListener
      Priority: 1
      Conditions:
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - OPTIONS
        - Field: path-pattern
          Values:
            - /api/crud/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref RentTrackingALBTG

  RentTrackingALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref MyALBListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /api/crud/*
      Actions:
        # - Type: authenticate-cognito
        #   Order: 1
        #   AuthenticateCognitoConfig:
        #     UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
        #     UserPoolClientId: !Ref ALBCognitoUserPoolClient
        #     UserPoolDomain: !Ref ExistingCognitoDomain
        #     OnUnauthenticatedRequest: authenticate
        #     Scope: openid
        #     SessionCookieName: AWSELBAuthSessionCookie
        #     SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref RentTrackingALBTG

  #==========================================================================================================================================================
  # Cognito
  #==========================================================================================================================================================

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref ExistingUserPoolId
      ClientName: !Sub '${AWS::StackName}-UserPoolClient'
      GenerateSecret: false
      AllowedOAuthFlows: ['code']
      AllowedOAuthScopes: ['phone', 'email', 'openid', 'profile']
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs: ['http://localhost:3000']
      LogoutURLs: ['http://localhost:3000']
      SupportedIdentityProviders: ['Google']

  # ALBCognitoUserPoolClient: # TODO: Handle after MyALBCertificate (Internal error reported from downstream service during operation 'Actions of type 'authenticate-cognito' are supported only on HTTPS listeners).
  #   Type: AWS::Cognito::UserPoolClient
  #   Properties:
  #     UserPoolId: !Ref ExistingUserPoolId
  #     ClientName: !Sub ${AWS::StackName}-alb-client
  #     GenerateSecret: true
  #     AllowedOAuthFlowsUserPoolClient: true
  #     AllowedOAuthFlows:
  #       - code
  #     AllowedOAuthScopes:
  #       - openid
  #       - email
  #       - profile
  #     CallbackURLs:
  #       - !Sub https://${MyALB.DNSName}/oauth2/idpresponse
  #     SupportedIdentityProviders:
  #       - Google
  #     PreventUserExistenceErrors: ENABLED

  # MyALBAuthenticator:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     ListenerArn: !Ref MyALBListener
  #     Priority: 1
  #     Conditions:
  #       - Field: path-pattern
  #         Values:
  #           - /oauth2/*
  #     Actions:
  #       - Type: authenticate-cognito
  #         Order: 1
  #         AuthenticateCognitoConfig:
  #           UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
  #           UserPoolClientId: !Ref ALBCognitoUserPoolClient
  #           UserPoolDomain: !Ref ExistingCognitoDomain
  #           OnUnauthenticatedRequest: authenticate
  #           Scope: openid
  #           SessionCookieName: AWSELBAuthSessionCookie
  #           SessionTimeout: 3600
  #       - Type: fixed-response
  #         Order: 2
  #         FixedResponseConfig:
  #           StatusCode: '200'
  #           ContentType: text/plain
  #           MessageBody: 'Authenticated'

  #==========================================================================================================================================================
  # ECS Fargate: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html
  #==========================================================================================================================================================
  MyECSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ExistingVpcId
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ECSPrivateSubnet1'
  MyECSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ExistingVpcId
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ECSPrivateSubnet2'

  MyPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ExistingVpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateRTB1'
  MyPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ExistingVpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateRTB2'

  MyECSPrivateSubnetToMyPrivateRTBAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyECSPrivateSubnet1
      RouteTableId: !Ref MyPrivateRouteTable1
  MyECSPrivateSubnetToMyPrivateRTBAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyECSPrivateSubnet2
      RouteTableId: !Ref MyPrivateRouteTable2

  MyNATGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  MyNATGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  MyNATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyNATGatewayEIP1.AllocationId
      SubnetId: !Ref MyPublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGateway1'
  MyNATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyNATGatewayEIP2.AllocationId
      SubnetId: !Ref MyPublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGateway2'

  MyPrivateSubnet1Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref MyNATGateway1
  MyPrivateSubnet2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref MyNATGateway2

  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-Cluster'

  MyECSTaskExecutionRole: # This role is assumed by the ECS task to pull images from Amazon ECR and to send logs to Amazon CloudWatch.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  MyECSTaskRole: # This role is assumed by the containers in the ECS task to interact with AWS services.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
      Policies:
        - PolicyName: SQSSavedActivityPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt RentTrackingSavedActivityQueue.Arn

  # RentTracking service
  #----------------
  RentTrackingECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${LogGroupName}/${AWS::StackName}'
      RetentionInDays: 1

  RentTrackingECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-rentTracking-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ECSContainerCpu
      Memory: !Ref ECSContainerMemory
      ExecutionRoleArn: !GetAtt MyECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt MyECSTaskRole.Arn
      ContainerDefinitions:
        - Name: 'rentTracking-task'
          Image: !Ref RentTrackingTaskEcrImageUri
          PortMappings:
            - ContainerPort: !Ref ECSContainerPort # The port the app listens on
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '${LogGroupName}/${AWS::StackName}'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment:
            - Name: SERVER_PORT
              Value: !Ref ECSContainerPort
            - Name: RDS_ENDPOINT
              Value: !Ref ExistingRDSEndpoint
            - Name: DB_NAME
              Value: !Ref CrudDatabaseName
            - Name: DB_USERNAME
              Value: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:username}}'
            - Name: DB_PASSWORD
              Value: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:password}}'
            - Name: APP_AWS_REGION
              Value: !Ref AWS::Region
            - Name: EXECUTED_APARTMENT_ACTIVITY_QUEUE_URL
              Value: !Ref RentTrackingSavedActivityQueue
            - Name: ELASTICACHE_REDIS_ADDRESS
              Value: !Ref ExistingElasticacheRedisClusterAddress
            - Name: SAAS_TENANT_ID
              Value: !Ref SaaSTenantUserId
            - Name: STACK_NAME
              Value: !Ref AWS::StackName
            - Name: ADMIN_USER_ID
              Value: !Ref AdminUserId
            - Name: ENABLE_ENHANCED_LOGGING
              Value: false

  RentTrackingECSService:
    Type: AWS::ECS::Service
    DependsOn: RentTrackingALBListenerRule
    Properties:
      ServiceName: !Sub '${AWS::StackName}-${RentTrackingServiceName}'
      Cluster: !Ref MyECSCluster
      TaskDefinition: !Ref RentTrackingECSTaskDefinition
      DesiredCount: !Ref ECSDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref MyECSServicesSG
          Subnets:
            - !Ref MyECSPrivateSubnet1
            - !Ref MyECSPrivateSubnet2
          AssignPublicIp: DISABLED
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      EnableExecuteCommand: true
      LoadBalancers:
        - ContainerName: 'rentTracking-task'
          ContainerPort: !Ref ECSContainerPort
          TargetGroupArn: !Ref RentTrackingALBTG

  #==========================================================================================================================================================
  # TODO: Alternate EKS (Kubernetes) with Fargate deployment: https://docs.aws.amazon.com/eks/latest/userguide/fargate.html.
  #==========================================================================================================================================================

  RentTrackingSavedActivityQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-savedActivityQueue.fifo'
      FifoQueue: true
      ContentBasedDeduplication: true

Outputs:
  LoadBalancerURL:
    Description: 'LoadBalancer URL'
    Value: !Sub 'http://${MyALB.DNSName}'

  MyECSServicesSG:
    Description: 'ECS Service security group'
    Value: !Ref MyECSServicesSG
